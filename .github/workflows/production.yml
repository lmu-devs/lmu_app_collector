name: Deploy to Production

on:
    workflow_dispatch:

jobs:
    deploy-to-production:
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Pull and retag Docker data_collector image for production
              run: |

                  # Pull the staging image
                  docker pull ${{ secrets.DOCKER_USERNAME }}/lmu-app-backend-data:staging

                  # Tag it for production
                  docker tag ${{ secrets.DOCKER_USERNAME }}/lmu-app-backend-data:staging ${{ secrets.DOCKER_USERNAME }}/lmu-app-backend-data:production

                  # Push the production tag
                  docker push ${{ secrets.DOCKER_USERNAME }}/lmu-app-backend-data:production

            - name: Set up SSH
              uses: webfactory/ssh-agent@v0.7.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Add host key
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

            - name: Deploy to production server
              run: |
                  echo "Deploying to production server..."
                  # Create deployment directory if it doesn't exist
                  ssh ${{ secrets.USER }}@${{ secrets.HOST }} "mkdir -p ${{ vars.APP_PATH }}"

                  # Clean up dangling images before deployment
                  ssh ${{ secrets.USER }}@${{ secrets.HOST }} "docker image prune -f"

                  # Copy compose.yml
                  scp compose.yml ${{ secrets.USER }}@${{ secrets.HOST }}:${{ vars.APP_PATH }}

                  # Deploy with forced pull of latest images
                  ssh ${{ secrets.USER }}@${{ secrets.HOST }} "cd ${{ vars.APP_PATH }} && \
                  echo 'Pulling latest images...' && \
                  docker compose pull data_collector && \
                  echo 'Bringing up services...' && \
                  docker compose up -d --force-recreate data_collector"

            - name: Notify deployment success
              if: success()
              run: echo "Deployment to production successful"
